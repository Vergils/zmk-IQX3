/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tab_esc_ctrl: tab_esc_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_ESC_CTRL";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kp TAB>;
        };

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <180>;
            tapping-term-ms = <200>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            global-quick-tap;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <11 10>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <21 20>;
        };
    };

    macros {
        KEY: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(C) &kp H &kp L &kp DOT &kp N8 &kp N8 &kp N0 &kp N6 &kp N0 &kp N2 &kp EXCL &kp AT &kp POUND &kp DLLR &kp PRCNT &kp CARET &kp ENTER>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &kp Q  &kp W  &kp E      &kp R        &kp T               &kp Y        &kp U           &kp I         &kp O    &kp P
  &kp A  &kp S  &kp D      &kp F        &kp G               &kp H        &kp J           &kp K         &kp L    &kp ENTER
  &kp Z  &kp X  &kp C      &kp V        &kp B               &kp N        &kp M           &kp COMMA     &kp DOT  &kp BACKSPACE
                &lt 3 SQT  &lt 2 SPACE  &mt LCTRL LEFT_WIN  &lt 1 SPACE  &kp LEFT_SHIFT  &kp LEFT_ALT
            >;
        };

        Number {
            label = "Number";
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4        &kp N5           &kp N6     &kp N7     &kp N8  &kp N9      &kp N0
  &none   &none   &none   &none         &none            &none      &none      &none   &none       &none
  &none   &none   &none   &kp C_VOL_DN  &kp C_VOLUME_UP  &none      &none      &none   &kp PERIOD  &none
                  &none   &kp SPACE     &kp SPACE        &kp SPACE  &kp SPACE  &none
            >;
        };

        Icons {
            label = "Icons";
            bindings = <
  &kp LS(N1)    &kp LS(N2)    &kp LS(N3)    &kp LS(N4)    &kp LS(N5)   &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
  &none         &kp LEFT      &kp DEL       &kp RIGHT     &bt BT_CLR   &none       &none       &none       &none       &none
  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bootloader  &none       &none       &none       &none       &none
                              &none         &none         &none        &none       &none       &none
            >;
        };

        layer_3 {
            bindings = <
  &trans    &kp UP_ARROW  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &kp LEFT  &kp DOWN      &kp RIGHT  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &trans    &trans        &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans
                          &trans     &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
